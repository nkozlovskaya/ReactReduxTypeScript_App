{"version":3,"sources":["actions/types.ts","actions/todos.ts","components/App.tsx","redusers/index.ts","redusers/todos.ts","index.tsx"],"names":["ActionTypes","_App","props","onButtonClick","fetchTodos","setState","fetching","onTodoClick","id","deleteTodo","state","this","prevProps","todos","length","map","todo","onClick","title","renderTodos","Component","App","connect","dispatch","a","axios","get","response","type","payload","data","reducers","combineReducers","action","filter","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","querySelector"],"mappings":"wIAGYA,E,gIAAAA,O,2BAAAA,I,4BAAAA,M,KCiBZ,I,OCLMC,E,kDAEJ,WAAYC,GAAgB,IAAD,8BACzB,cAAMA,IAcRC,cAAgB,WACd,EAAKD,MAAME,aACX,EAAKC,SAAS,CAAEC,UAAW,KAjBF,EAoB3BC,YAAc,SAACC,GACb,EAAKN,MAAMO,WAAWD,IAnBtB,EAAKE,MAAQ,CAAEJ,UAAU,GAFA,E,qDAK3B,WACEK,KAAKT,MAAME,e,gCAGb,SAAmBQ,IACZA,EAAUC,MAAMC,QAAUH,KAAKT,MAAMW,MAAMC,QAC9CH,KAAKN,SAAS,CAAEC,UAAW,M,yBAa/B,WAA8B,IAAD,OAC3B,OAAOK,KAAKT,MAAMW,MAAME,KAAI,SAACC,GAC3B,OACE,qBAAKC,QAAS,kBAAI,EAAKV,YAAYS,EAAKR,KAAxC,SAA8DQ,EAAKE,OAAfF,EAAKR,S,oBAI/D,WAEE,OACE,gCACE,wBAAQS,QAASN,KAAKR,cAAtB,mBACCQ,KAAKD,MAAMJ,SAAW,UAAY,KAClCK,KAAKQ,qB,GAvCKC,aAiDNC,EAAMC,aAJK,SAAC,GACvB,MAAO,CAACT,MAD2D,EAA3CA,SAMtB,CAACT,WD5CqB,WACxB,8CAAO,WAAOmB,GAAP,eAAAC,EAAA,sEACkBC,IAAMC,IAJvB,8CAGD,OACCC,EADD,OAGLJ,EAA6B,CAC3BK,KAAM5B,EAAYI,WAClByB,QAAUF,EAASG,OALhB,2CAAP,uDC2CerB,WDjCS,SAACD,GACzB,MAAO,CACLoB,KAAM5B,EAAYS,WAClBoB,QAASrB,KC4BMc,CAGjBrB,GC3DW8B,EAAWC,YAA6B,CACnDnB,MCP0B,WAA6C,IAA3CH,EAA0C,uDAAzB,GAAIuB,EAAqB,uCAEtE,OAAQA,EAAOL,MACb,KAAK5B,EAAYI,WACf,OAAO6B,EAAOJ,QAChB,KAAK7B,EAAYS,WACf,OAAOC,EAAMwB,QAAO,SAAClB,GAAD,OAAcA,EAAKR,KAAOyB,EAAOJ,WACvD,QACE,OAAOnB,MCDPyB,EAAOC,YAAYL,EAAUM,YAAgBC,MAGnDC,IAASC,OACP,cAAC,IAAD,CAAUL,MAAOA,EAAjB,SACE,cAACd,EAAD,MAEJoB,SAASC,cAAc,Y","file":"static/js/main.994c10c1.chunk.js","sourcesContent":["import { FetchTodosAction, DeleteTodoAction } from \"./todos\";\n\n\nexport enum ActionTypes {\n  fetchTodos,\n  deleteTodo\n}\n\nexport type Action = FetchTodosAction | DeleteTodoAction","import axios from 'axios';\nimport {Dispatch} from 'redux';\nimport {ActionTypes} from './types';\n\nexport interface Todo {\n  id: number,\n  title: string,\n  completed: boolean,\n}\n\nexport interface FetchTodosAction {\n  type: ActionTypes.fetchTodos,\n  payload : Todo[];\n}\n\nexport interface DeleteTodoAction {\n  type: ActionTypes.deleteTodo;\n  payload: number\n}\n\nconst url='https://jsonplaceholder.typicode.com/todos'\n\nexport const fetchTodos = () => {\n  return async (dispatch: Dispatch) => {\n    const response = await axios.get <Todo[]>(url);\n\n    dispatch <FetchTodosAction> ({\n      type: ActionTypes.fetchTodos,\n      payload : response.data\n    });\n  };\n};\n\nexport const deleteTodo = (id: number): DeleteTodoAction =>{\n  return {\n    type: ActionTypes.deleteTodo,\n    payload: id\n  }\n}","import React, {Component} from 'react';\nimport { connect} from 'react-redux';\nimport { Todo, fetchTodos, deleteTodo } from '../actions';\nimport { StoreState } from '../redusers';\n\ninterface AppProps {\n  todos: Todo[];\n  fetchTodos: Function;\n  deleteTodo: typeof deleteTodo;\n}\n\ninterface AppState {\n  fetching: boolean;\n}\n\nclass _App extends Component <AppProps, AppState> {\n\n  constructor(props:AppProps){\n    super(props);\n    this.state = { fetching: false }\n  }\n\n  componentDidMount() {\n    this.props.fetchTodos();\n  }\n\n  componentDidUpdate(prevProps: AppProps): void {\n    if (!prevProps.todos.length && this.props.todos.length) {\n      this.setState({ fetching : false});\n    };\n  };\n\n  onButtonClick = () : void => {\n    this.props.fetchTodos();\n    this.setState({ fetching : true });\n  };\n\n  onTodoClick = (id: number): void =>{\n    this.props.deleteTodo(id);\n  }\n\n  renderTodos(): JSX.Element[] {\n    return this.props.todos.map((todo: Todo) => {\n      return (\n        <div onClick={()=>this.onTodoClick(todo.id)} key = {todo.id}>{todo.title}</div>)\n    })\n  }\n\n  render(){\n    // console.log(this.props.todos);\n    return (\n      <div>\n        <button onClick={this.onButtonClick}>Fetch</button>\n        {this.state.fetching ? 'LOADING' : null}\n        {this.renderTodos()}\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = ({todos} : StoreState) : { todos: Todo[]} => {\n  return {todos};\n};\n\nexport const App = connect(\n    mapStateToProps,\n    {fetchTodos, deleteTodo}\n)(_App);\n\n","import { combineReducers } from \"redux\";\nimport { todosReducer } from \"./todos\";\nimport { Todo } from '../actions';\n\nexport interface StoreState {\n  todos: Todo[];\n}\n\nexport const reducers = combineReducers <StoreState>({\n  todos: todosReducer\n});","import {Todo, Action, ActionTypes} from '../actions';\n\nexport const todosReducer = ( state : Todo[] = [], action : Action ) => {\n\n  switch (action.type ){\n    case ActionTypes.fetchTodos:\n      return action.payload;\n    case ActionTypes.deleteTodo:\n      return state.filter((todo:Todo)=> todo.id !== action.payload);\n    default:\n      return state;\n  }\n};","import React, {Component} from 'react';\nimport ReactDOM from 'react-dom';\nimport {createStore, applyMiddleware} from 'redux';\nimport {Provider} from 'react-redux';\nimport thunk from 'redux-thunk';\nimport {App} from './components/App';\nimport {reducers} from './redusers';\n\n\nconst store= createStore(reducers, applyMiddleware(thunk));\n\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\ndocument.querySelector('#root')\n);"],"sourceRoot":""}